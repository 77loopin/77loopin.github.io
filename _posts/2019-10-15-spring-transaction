---
title: "String Transactions"
date: 2019-10-15 13:00:00 -0000
categories: Spring
tags: Spring, Transactions
---

## Spring, Transactions

#### Q1. Transaction 성질에 대하여 설명해보시오. (ACID)

<details><summary style="font-size:15px">보기</summary>
  
---

#### 1. 원자성(Atomicity)
- 한 트랜잭션 내에서 실행한 작업들은 하나로 간주한다. 즉, 모두 성공 또는 모두 실패. 

#### 2. 일관성(Consistency)
- 트랜잭션은 일관성 있는 데이타베이스 상태를 유지한다. (data integrity 만족 등.)


#### 3. 격리성(Isolation)
- 동시에 실행되는 트랜잭션들이 서로 영향을 미치지 않도록 격리해야한다.

#### 4. 지속성(Durability)
- 트랜잭션을 성공적으로 마치면 결과가 항상 저장되어야 한다.

---

</details>



#### Q2. 다수 Transaction 경쟁 시 발생할 수 있는 문제를 설명해보오.

<details><summary style="font-size:15px">보기</summary>
  
---

#### 1. Dirty Read
- 다른 트랜잭션에 의해 수정됐지만 아직 커밋되지 않은 데이터를 읽는 것을 말한다. 변경 후 아직 커밋되지 않은 값을 읽었는데 변경을 가한 트랜잭션이 최종적으로 롤백된다면 그 값을 읽은 트랜잭션은 비일관된 상태에 놓이게 된다.

#### 2. Non-Repeatable Read
- 한 트랜잭션 내에서 같은 쿼리를 두 번 수행했는데, 그 사이에 다른 트랜잭션이 값을 수정 또는 삭제하는 바람에 두 쿼리 결과가 다르게 나타나는 현상을 말한다.

#### 3. Phantom Read
- 같은 쿼리를 수행했는데, 첫 번재 쿼리엔 없던 유령(phantom) 레코드가 두 번재 쿼리에서 나타나는 현상

---

</details>


#### Q3. Spring Transaction 속성들에 대해 설명해보시오.
###### Q3-1. isolation
<details><summary style="font-size:15px">보기</summary>
  
---
###### DEFAULT
- 기본 격리 수준(기본설정, DB의 Isolation Level을 따름)

###### READ_UNCOMMITTED (level 0)
- 커밋되지 않는(트랜잭션 처리중인) 데이터에 대한 읽기를 허용
- Dirty Read `발생`

###### READ_COMMITTED (level 1)
- 트랜잭션이 커밋 된 확정 데이터만 읽기 허용
- Dirty Read `방지`

###### SERIALIZABLE (level 3)
- 데이터의 일관성 및 동시성을 위해 MVCC(Multi Version Concurrency Control)을 사용하지 않음
- 트랜잭션이 완료될 때까지 SELECT 문장이 사용하는 모든 데이터에 shared lock이 걸리므로 다른 사용자는 그 영역에 해당되는 데이터에 대한 수정 및 입력이 불가능하다.
- Phantom Read 방지

**격리 수준이 올라갈수록 성능 저하가 발생할 수 있음**

---

</details>


###### Q3-2. propagation 
<details><summary style="font-size:15px">보기</summary>

---

트랜잭션 동작 도중 다른 트랜잭션을 호출(실행)하는 상황이에 선택할 수 있는 옵션이다.

###### REQUIRED
- 부모 트랜잭션 내에서 실행하며 부모 트랜잭션이 없을 경우 새로운 트랜잭션을 생성
###### REQUIRES_NEW
- 부모 트랜잭션을 무시하고 무조건 새로운 트랜잭션이 생성
###### SUPPORT
- 부모 트랜잭션 내에서 실행하며 부모 트랜잭션이 없을 경우 nontransactionally로 실행
###### MANDATORY
- 부모 트랜잭션 내에서 실행되며 부모 트랜잭션이 없을 경우 예외가 발생
###### NOT_SUPPORT
- nontransactionally로 실행하며 부모 트랜잭션 내에서 실행될 경우 일시 정지
###### NEVER
- nontransactionally로 실행되며 부모 트랜잭션이 존재한다면 예외가 발생
###### NESTED
- 해당 메서드가 부모 트랜잭션에서 진행될 경우 별개로 커밋되거나 롤백될 수 있음. 둘러싼 트랜잭션이 없을 경우 REQUIRED와 동일하게 작동
---


</details>

###### Q3-3. readOnly 

<details><summary style="font-size:15px">보기</summary>
  
---

- 트랜잭션을 읽기 전용으로 설정할 수 있다.
- 일반적으로 읽기 전용 트랜잭션이 시작된 이후 INSERT, UPDATE, DELETE 같은 쓰기 작업이 진행되면 예외가 발생한다.


---

</details>


###### Q3-4. rollbackFor, noRollbackFor

<details><summary style="font-size:15px">보기</summary>
  
---

###### rollbackFor
- 정의된 Exception에 대해서는 rollback 수행

###### noRollbackFor
- 정의된 Exception에 대해서는 rollback 수행하지 않ㅇ므



---

</details>


###### Q3-4. timeout

<details><summary style="font-size:15px">보기</summary>
  
---

지정한 시간 내에 해당 메서드가 완료되지 않은 경우 rollback 수행

---

</details>



